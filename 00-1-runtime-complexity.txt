TIME/RUNTIME COMPLEXITY:

-describes the performance of an algorithm

-basically we are asking
-how much more processing power/time will be required to run our algorithm if we double the inputs?

-for inputs = N
	-constant time: time independent of N
	// algorithm takes the same time always

	-logarithmic time: log(N)
	// searching operations

	-linear time: N 
	// single loops
		// N when single loop is iterating over the a collection
		// N + M when single loops are each iterating over two different collections

	-quasilinear time: N * log(N)
	// sorting operations

	-quadratic time: N^2
	// when every element in collection needs to be compared with every other element
	// nested loops
		// N^2 when two nested loops are iterating over the same collection
		// N*M when two nested loops are each iterating over two different collections

	-exponential time: 2^N
	// when addition of a single element to collection, doubles the processing power needed

-big-O notation:
-a way of representing runtime complexity
	O(1): 	constant
	O(N): 	linear
	O(N^2): quadratic
	...and so on

--------------------------------------------------------
SPACE COMPLEXITY:

-describes the performance of an algorithm

-basically we are asking
-how much more memory will be required to run our algorithm if we double the inputs?

-similar ideas as time complexity above, apply
(not always though)

