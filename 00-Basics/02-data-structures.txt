DATA STRUCTURES:

-ways of organizing information with an optimal time complexity for adding/removing records (data), wrt the particular problem

-queue:
	-records enter from one end, exit from the other end (FIFO)
	// adding records to queue is called enqueuing
	// removing records from queue is called dequeuing

-stack:
	-records enter from one end, exit from the same end (FILO or LIFO)
	// adding records to stack is called pushing
	// removing records from stack is called popping
	// returning the top record without popping it is called peeking

-linked list:
	-the collection contains multiple separate nodes
	-each node contains 
		-some data
		-and a reference to the next node
	-basically, an ordered 'chain' of nodes
	-first node in linked list = head node
	-last node in linked list = tail node
	(the tail node does not have a reference to any other node duh...)

-tree:
	-the collection contains multiple separate nodes
	-each node contains 
		-some data
		-and an array containing its child nodes
	-node below is called child
	-node above is called parent
	-node on same level (and having the same parent) is called sibling
	-tree traversal:
		-DFS (depth first search)
		-BFS (breadth first search)

	-binary search tree:
	-every node can have at most 2 children (left node and right node)
		-left node will always have value lesser than parent node
		-right node will always have value greater than parent node
		-also, 
		-every child node (children of other child nodes) on the left of parent must have values lesser than parent
		-every child node (children of other child nodes) on the right of parent must have values greater than parent
		-see bst-example.jpg
